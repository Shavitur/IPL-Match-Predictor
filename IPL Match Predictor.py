# -*- coding: utf-8 -*-
"""IPL Match Predictor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19g40HI8-nnt6k2FueHIx0wG-f51j2ARM
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path="/content/drive/MyDrive/IPL/matches.csv"
match= pd.read_csv(path)
print(match.shape)
match.head()

delivery=pd.read_csv('/content/drive/MyDrive/IPL/deliveries.csv')
print(delivery.shape)
delivery.head()

total_runs_df=delivery.groupby(['match_id','inning']).sum()['total_runs'].reset_index()
total_runs_df.shape

total_runs_df=total_runs_df[total_runs_df['inning']==1]

match=match.merge(total_runs_df[['match_id','total_runs']],left_on='id',right_on='match_id')
print(match.shape)
match.head()

# Total Match played by the teams
match['team1'].value_counts()

match['team1'].unique()

"""Removing redundant teams"""

teams={'Sunrisers Hyderabad','Mumbai Indians','Royal Challengers Bangalore',
       'Chennai Super Kings','Delhi Capitals','Kings XI Punjab','Rajasthan Royals','Kolkata Knight Riders'}

match['team1']=match['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
match['team2']=match['team2'].str.replace('Delhi Daredevils','Delhi Capitals')

#Deccan chargers played most of the w.r.t old teams , as per the value_counts
match['team1']=match['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
match['team2']=match['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

match=match[match['team1'].isin(teams)]
match=match[match['team2'].isin(teams)]

match.shape

match['dl_applied'].value_counts()

match=match[match['dl_applied']==0]
match.shape

match=match[['match_id','city','winner','total_runs']]
match.head()

delivery=match.merge(delivery,on='match_id')
delivery.head()

delivery.shape

# Extracting Second Innings data
delivery=delivery[delivery['inning']==2]
print(delivery.shape)
delivery.head()

#Current Score and runs left
#find current score,runs_left
delivery['current_score']=delivery.groupby('match_id').cumsum()['total_runs_y']
delivery['runs_left']=delivery['total_runs_x']-delivery['current_score'] + 1

# Balls left
delivery['balls_left'] = 126 - (delivery['over']*6 + delivery['ball'])
delivery.head(7)

#Current run rate,required run rate
delivery['crr']=(delivery['current_score']*6)/(120-delivery['balls_left'])
delivery['rrr']=round((delivery['runs_left']*6)/(delivery['balls_left']),3)
delivery.head(2)

#wickets left
delivery['player_dismissed']=delivery['player_dismissed'].fillna('0')
delivery['player_dismissed']=delivery['player_dismissed'].apply(lambda x:x if x=='0' else '1')
delivery['player_dismissed']=delivery['player_dismissed'].astype('int')
wickets=delivery.groupby('match_id').cumsum()['player_dismissed'].values
delivery['wickets_left']=10-wickets

#Result
def result(row):
    if row['batting_team']==row['winner']:
        return 1
    else:
        return 0

delivery['result']=delivery.apply(result,axis=1)
delivery.head()

"""Data Cleaning"""

#Extracting out relevent features from delivery dataframe
final_df=delivery[['batting_team','bowling_team','city','runs_left','balls_left',
                   'total_runs_x','crr','rrr','wickets_left','result']]

plt.figure(figsize=(14,6))
sns.heatmap(final_df.isnull())
plt.show()

final_df.isnull().sum()

"""Dropping the null values"""

final_df.dropna(inplace=True)
final_df.shape

final_df=final_df[final_df['balls_left']!=0]
print(final_df['rrr'].describe())
final_df.shape

final_df=final_df.sample(final_df.shape[0])
final_df.head()

#splitting data
X=final_df.iloc[:,:-1]
y=final_df.iloc[:,-1]
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=20)

#shape of X_train ,y_train
print(X_train.shape)
print(y_train.shape)

X_train.head()

#Categorical Columns transformation using One Hot Encoding
trf=ColumnTransformer([
    ('trf',OneHotEncoder(sparse=False,drop='first'),['batting_team','bowling_team','city'])
],remainder='passthrough')

#PipeLine formation
pipe=Pipeline(steps=[
    ('step1',trf),
    ('step2',LogisticRegression(solver='liblinear'))
])

#Prediction
pipe.fit(X_train,y_train)
y_pred=pipe.predict(X_test)
accuracy_score(y_test,y_pred)

pipe.predict_proba(X_test)[0]

final_df.head()

def match_progression(x_df,match_id,pipe):
    match = x_df[x_df['match_id'] == match_id]
    match = match[(match['ball'] == 6)]
    temp_df = match[['batting_team','bowling_team','city','runs_left','balls_left','total_runs_x','crr','rrr','wickets_left']].dropna()
    temp_df = temp_df[temp_df['balls_left'] != 0]
    result = pipe.predict_proba(temp_df)
    temp_df['lose_proba'] = np.round(result.T[0]*100,1)
    temp_df['win_proba'] = np.round(result.T[1]*100,1)
    temp_df['end_of_over'] = range(1,temp_df.shape[0]+1)
    
    target = temp_df['total_runs_x'].values[0]
    batting_team=temp_df['batting_team'].values[0]
    bowling_team=temp_df['bowling_team'].values[0]
    runs = list(temp_df['runs_left'].values)
    new_runs = runs[:]
    runs.insert(0,target)
    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)
    #wickets = list(temp_df['wickets'].values)
    #new_wickets = wickets[:]
    #new_wickets.insert(0,10)
    #wickets.append(0)
    #w = np.array(wickets)
    #nw = np.array(new_wickets)
    #temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]
    print('Batting_team:- ',batting_team)
    print('Bowling_team:- ',bowling_team)
    print("Target-",target)
    
    temp_df = temp_df[['end_of_over','runs_after_over','wickets_left','lose_proba','win_proba']]
    return temp_df,target

import numpy as np 
temp_df,target=match_progression(delivery,1,pipe)
temp_df

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.figure(figsize=(15,8))
ax = plt.axes()
ax.set_facecolor("black")
plt.plot(temp_df['end_of_over'],temp_df['lose_proba'],color='red',linewidth=4)
plt.plot(temp_df['end_of_over'],temp_df['win_proba'],color='green',linewidth=4)
plt.plot(temp_df['end_of_over'],temp_df['wickets_left'],color='yellow',linewidth=4)
plt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])
plt.xlabel('end_of_over')
plt.title('Target:- '+ str(target))
plt.show()